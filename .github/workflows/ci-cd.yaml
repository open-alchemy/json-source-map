name: CI-CD

on:
  push:
    branches:
      - main
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        run: pip install poetry
      - uses: actions/cache@v3
        id: cache-poetry
        with:
          path: ~/.virtualenvs
          key: ${{ runner.os }}-python${{ matrix.python-version }}-poetry-${{ hashFiles('poetry.lock', 'poetry.toml') }}
      - name: Configure poetry for ci
        run: |
          poetry config virtualenvs.in-project false --local
          poetry config virtualenvs.path ~/.virtualenvs --local
      - name: Install python dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          poetry install
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 14.x
      - uses: actions/cache@v3
        id: cache-npm
        with:
          path: node_modules
          key: ${{ runner.os }}-node14-npm-${{ hashFiles('package-lock.json') }}
      - name: Install node dependencies
        if: steps.cache-npm.outputs.cache-hit != 'true'
        run: npm install
      - name: Test with pytest
        run: |
          poetry run pytest || (poetry install && poetry run pytest)

  staticNode:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        command:
          - npx cspell "json_source_map/**/*" "tests/**/*"
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 14.x
      - name: Install dependencies
        run: npm install cspell
      - name: Run static code analyser
        run: |
          ${{ matrix.command }}

  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - uses: pre-commit/action@v3.0.0

  build:
    runs-on: ubuntu-latest
    needs:
      - pre-commit
      - test
      - staticNode
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install poetry
        run: pip install poetry
      - uses: actions/cache@v3
        id: cache-poetry
        with:
          path: ~/.virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock', 'poetry.toml') }}
      - name: Configure poetry for ci
        run: |
          poetry config virtualenvs.in-project false --local
          poetry config virtualenvs.path ~/.virtualenvs --local
      - name: Install dependencies
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          poetry install
      - name: Build packages
        run: poetry build
      - name: Upload artifacts for release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v3
        with:
          name: wheel
          path: dist/

  release-test-pypi:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build
    steps:
      - name: Retrieve packages
        uses: actions/download-artifact@v3
        with:
          name: wheel
          path: dist/
      - name: Publish distribution ðŸ“¦ to Test PyPI
        uses: pypa/gh-action-pypi-publish@v1.8.7
        with:
          password: ${{ secrets.test_pypi_password }}
          repository_url: https://test.pypi.org/legacy/

  release-pypi:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - release-test-pypi
    steps:
      - name: Retrieve packages
        uses: actions/download-artifact@v3
        with:
          name: wheel
          path: dist/
      - name: Publish distribution ðŸ“¦ to PyPI
        if: startsWith(github.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@v1.8.7
        with:
          password: ${{ secrets.pypi_password }}
          repository_url: https://upload.pypi.org/legacy/

  release-github:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - release-pypi
    steps:
      - name: Get version from tag
        id: tag_name
        run: |
          echo ::set-output name=current_version::${GITHUB_REF#refs/tags/v}
        shell: bash
      - uses: actions/checkout@v3
      - name: Get latest Changelog Entry
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2
        with:
          version: v${{ steps.tag_name.outputs.current_version }}
          path: ./CHANGELOG.md
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.changelog_reader.outputs.version }}
          release_name: Release ${{ steps.changelog_reader.outputs.version }}
          body: ${{ steps.changelog_reader.outputs.changes }}
          prerelease: ${{ steps.changelog_reader.outputs.status == 'prereleased' }}
          draft: ${{ steps.changelog_reader.outputs.status == 'unreleased' }}
